\input texinfo   @c -*- mode: texinfo -*-

@c *****************************************************************************
@c %**start of header (This is for running Texinfo on a region.)

@setfilename  Clojure-Lang.info
@settitle     Clojure Language Reference
@include      my-bib-macros.texi
@mybibusetable{Bibliography}

@c %**end of header (This is for running Texinfo on a region.)
@c *****************************************************************************

@c VERSION 0.0.3
@c DATE    2018-10-28T00:45

@c *****************************************************************************
@c DOCUMENT VARIABLES
@c *****************************************************************************

@c -----------------------------------------------------------------------------
@set TITLE      Clojure Language Reference
@set SHORTTITLE Clojure Lang
@set EDITION 0.1
@set UPDATE-MONTH OCTOBER, 2018 @c goes in the subtitle
@set AUTHOR WLHarvey4
@set ADDRESS1 Address Line 1
@set ADDRESS2 Address Line 2
@set COPYRIGHT 2018
@c -----------------------------------------------------------------------------




@c *****************************************************************************
@c FINALOUT / DRAFT / FORPRINT
@c *****************************************************************************

@c -----------------------------------------------------------------------------
@set      DRAFT @i{DRAFT} @c when set, print DRAFT in heading
@c @clear DRAFT  @c when clear, don't print DRAFT in heading
@clear  FINALOUT @c when clear, show black boxes for overfull lines
@c @set FINALOUT @c when set, don't show black boxes for overfull lines
@clear  FORPRINT @c when clear, PDF output is for viewing, not printing
@c @set FORPRINT @c when set, PDF output is for printing, not viewing

@iftex
@ifset FINALOUT @c don't show black boxes for final printout
@finalout
@end ifset
@end iftex

@c Uncomment this for the release.  Leaving it off saves paper
@c during editing and review.
@ifset FORPRINT
@ifset FINALOUT
@c @setchapternewpage odd
@end ifset
@end ifset

@ifclear FORPRINT
@pdflinkcolor
@urllinkcolor
@hideurls
@end ifclear
@c -----------------------------------------------------------------------------




@c *****************************************************************************
@c SECTIONING
@c *****************************************************************************

@c -----------------------------------------------------------------------------
@iftex
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end iftex
@ifhtml
@set DOCUMENT Web page
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifhtml
@ifinfo
@set DOCUMENT Info file
@set CHAPTER major node
@set APPENDIX major node
@set SECTION minor node
@set SUBSECTION node
@end ifinfo
@ifdocbook
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifdocbook
@c -----------------------------------------------------------------------------




@c *****************************************************************************
@c SPECIAL TEXIWEBJR COMMANDS
@c *****************************************************************************

@c -----------------------------------------------------------------------------
@c Change how xref titles are quoted.
@dquotexrefs
@c And let braces in index entries work.
@allowindexbraces

@c some special symbols
@ifnottex
@macro ii{text}
@i{\text\}
@end macro
@end ifnottex
@c -----------------------------------------------------------------------------




@c *****************************************************************************
@c INDEX COMMANDS
@c *****************************************************************************(

@c merge the function and variable indexes into the concept index
@c do so without the code font, and in the index entries do the
@c font management ourselves.  Also merge in the chunk definition
@c and reference entries, which jrweave creates for us.
@ifnothtml
@synindex fn cp
@synindex vr cp
@synindex cd cp
@synindex cr cp
@end ifnothtml




@c *****************************************************************************
@copying
@c *****************************************************************************

@ -----------------------------------------------------------------------------
@docbook
<para>Published by:</para>

<literallayout class="normal">Full Name
Address Line 1
Address Line 2
etc.
Email: <email>user@@example.com</email>
URL: <ulink url="http://www.example.com/">http://www.example.com/</ulink></literallayout>

<literallayout class="normal">Copyright &copy; YYYY, YYYY
Full name here
All Rights Reserved.</literallayout>
@end docbook
@c -----------------------------------------------------------------------------


@c -----------------------------------------------------------------------------
@ifnotdocbook
Copyright @copyright{} @value{COPYRIGHT} @*
@value{AUTHOR} @*
All Rights Reserved.
@end ifnotdocbook
@c -----------------------------------------------------------------------------


@sp 1
The @value{TITLE} is copyright
@copyright{} @value{COPYRIGHT} by @value{AUTHOR}. It is published under
the conditions of the GNU General Public License, version 3.
@sp 2
This is Edition @value{EDITION} of @cite{@value{TITLE}}.

@end copying
@c /////////////////////////////////////////////////////////////////////////////




@c =============================================================================
@titlepage
@c =============================================================================

@c Uncomment this if it's ever printed as a real book(let).
@c @shorttitlepage @value{SHORTTITLE}

@title @value{TITLE}
@subtitle @value{UPDATE-MONTH}
@author @value{AUTHOR} @c Full Name here

@ifnotdocbook
@c Include the Distribution inside the titlepage environment so
@c that headings are turned off.  Headings on and off do not work.

@page
@vskip 0pt plus 1filll
Published by:
@sp 1
@value{AUTHOR} @*
@value{ADDRESS1} @*
@value{ADDRESS2} @*
@* @c etc.
Email: @EMAIL{user@@example.com,user AT example.com} @*
URL: @url{http://www.example.com/} @*

@insertcopying
@end ifnotdocbook

@end titlepage
@c /////////////////////////////////////////////////////////////////////////////



@c *****************************************************************************
@c HEADINGS
@c *****************************************************************************

@iftex
@headings off
@evenheading @thispage @| @value{DRAFT} @| @strong{@value{SHORTTITLE}}
@oddheading  @strong{@thischapter} @| @value{DRAFT} @| @thispage
@end iftex








@c #############################################################################
@c BEGIN
@c #############################################################################








@ifnottex
@ifnotdocbook
@ifnotxml

@c =============================================================================
@node Top
@top The CLOJURE Programming Language
@c =============================================================================

@c Preface node should come right after the Top
@c node, in `unnumbered' sections, then the introductory chapter.
@c Licensing nodes are appendices, they're not central to TexiWebJr.

This  file documents  the programming  language CLOJURE,  and provides  example
source code that can be extracted and run.

@insertcopying
@end ifnotxml
@end ifnotdocbook
@end ifnottex




@c =============================================================================
@menu
@detailmenu
@end detailmenu
@end menu
@c =============================================================================




@c =============================================================================
@c @summarycontents
@contents
@c =============================================================================








@c *****************************************************************************

@c Add these to the menu if they ever get included.
@c @node Foreword
@c @unnumbered Foreword








@c *****************************************************************************

@node Preface
@unnumbered Preface

Text here.

@menu
* Audience::                    Who should read this @value{DOCUMENT}.
* Overview::                    An overview of the @value{DOCUMENT}.
* Conventions::                 Typographical conventions.
* Acknowledgements::            Acknowledgements.
@end menu




@c -----------------------------------------------------------------------------
@node Audience
@unnumberedsec Intended Audience

Audience text here.




@c -----------------------------------------------------------------------------
@node Overview
@unnumberedsec What Is Covered

Overview text and chapter by chapter description here.




@c -----------------------------------------------------------------------------
@node Conventions
@unnumberedsec Typographical Conventions

@c Copied mostly verbatim from the gawk manual.

@cindex Texinfo document formatting language
This @value{DOCUMENT} is written in an enhanced version of
@uref{http://www.gnu.org/software/texinfo/, Texinfo},
the GNU documentation formatting language.
A single Texinfo source file is used to produce both the printed and online
versions of a program's documentation.
@ifnotinfo
Because of this, the typographical conventions
are slightly different than in other books you may have read.
@end ifnotinfo

Examples you would type at the command-line are preceded by the common
shell primary and secondary prompts, @samp{$} and @samp{>}.  Input that
you type is shown @kbd{like this}.  Output from the command is preceded
by the glyph ``@print{}''.  This typically represents the command's
standard output.  Error messages, and other output on the command's
standard error, are preceded by the glyph ``@error{}''.  For example:

@example
$ @kbd{echo hi on stdout}
@print{} hi on stdout
$ @kbd{echo hello on stderr 1>&2}
@error{} hello on stderr
@end example

@ifnotinfo
In the text, command names appear in @code{this font}, while code segments
appear in the same font and quoted, @samp{like this}.  Options look
like this: @option{-f}.  Some things are emphasized @emph{like this},
and if a point needs to be made strongly, it is done @strong{like this}.
The first occurrence of a new term is usually its @dfn{definition} and
appears in the same font as the previous occurrence of ``definition''
in this sentence.  Finally, file names are indicated like this:
@file{/path/to/our/file}.
@end ifnotinfo




@c -----------------------------------------------------------------------------
@node Acknowledgements
@unnumberedsec Acknowledgements

Acknowledgements go here.




@c /////////////////////////////////////////////////////////////////////////////
@c END Preface








@c *****************************************************************************
@node Introduction
@chapter Introduction

CLOJURE's home page is at: @url{https://clojure.org/index}.

The home site describes CLOJURE as:

@quotation
Clojure is  a robust, practical,  and fast programming  language with a  set of
useful features that together form a simple, coherent, and powerful tool.

Clojure  is  a dynamic,  general-purpose  programming  language, combining  the
approachability and  interactive development  of a  scripting language  with an
efficient and robust infrastructure  for multithreaded programming.  Clojure is
a compiled language, yet remains completely dynamic –-- every feature supported
by Clojure is  supported at runtime.  Clojure provides easy  access to the Java
frameworks, with optional  type hints and type inference, to  ensure that calls
to Java can avoid reflection.

Clojure is a dialect of Lisp,  and shares with Lisp the code-as-data philosophy
and a powerful macro system.  Clojure is predominantly a functional programming
language,   and   features  a   rich   set   of  immutable,   persistent   data
structures.  When   mutable  state  is   needed,  Clojure  offers   a  software
transactional  memory  system and  reactive  Agent  system that  ensure  clean,
correct, multithreaded designs.

@end quotation

@heading Important Ideas

@itemize
@item Practical
@item General Purpose
@item Scripting Language
@item Multithreaded Programming
@item Compiled Language
@item Dynamic Language
@item Java Frameworks
@item Type Hints / Type Inference
@item Dialect of Lisp
@item Code-As-Data
@item Macro System
@item Immutable Data Structure
@item Transactional Memory System / Reactive Agent System
@end itemize

@heading Rationale

CLOJURE provides the following features (benefits):

@itemize
@item it is LISP
@item it is FUNCTIONAL
@item symbiotic with the JVM
@item supports CONCURRENCY
@end itemize



@c -----------------------------------------------------------------------------

@node Rationale in Detail
@section Rationale in Detail

@itemize
@item Stakeholders want the JVM

Customers and stakeholders have substantial investments in, and are comfortable
with the  performance, security  and stability of,  industry-standard platforms
like the JVM.

@item Stakeholders envy dynamic languages

Java developers @dots{} envy the  succinctness, flexibility and productivity of
dynamic languages;

@item Problems with concurrency

they face  ongoing problems dealing  with concurrency using native  threads and
locking.

@item Clojure addresses these concerns

Clojure is an effort in pragmatic  dynamic language design in this context.  It
endeavors to be  a general-purpose language suitable in those  areas where Java
is  suitable.  It  reflects the  reality that,  for the  concurrent programming
future, pervasive, unmoderated mutation simply has to go.

@item Clojure runs on the JVM

Clojure meets its  goals by: embracing an industry-standard,  open platform ---
the JVM;

@item CLOJURE is LISP

modernizes a venerable language - Lisp;

@item uses functional programming and immutable data

fosters  the functional  programming paradigm  with immutable,  persistent data
structures;

@item has concurrency support

and provides built-in  concurrency support  via software transactional  memory and
asynchronous agents.

@item CLOJURE IS:

robust --- practical --- fast

@end itemize




@c -----------------------------------------------------------------------------

@node Dynamic Functional Lisp
@section CLOJURE Is Dynamic Functional Lisp

CLOJURE is  a Lisp  not constrained  by backwards compatibility;  it is  also a
functional language supporting  immutability that is not  constrained by static
typing or homogeneous collections.

@itemize
@item
Extends the code-as-data paradigm to maps and vectors
@item
Defaults to immutability
@item
Core data structures are extensible abstractions
@item
Embraces a platform (JVM)
@item
Clojure is a functional language with a dynamic emphasis
@item
All data structures immutable & persistent, supporting recursion
@item
Heterogeneous collections, return types
@item
Dynamic polymorphism
@end itemize




@c -----------------------------------------------------------------------------

@node Clojure Features,
@section Clojure Features
@cindex features

Clojure has a set of useful features that together form a simple, coherent, and
powerful tool.


@c .....................................

@node Dynamic Development
@subsection Dynamic Development
@cindex dynamic

First and foremost,  Clojure is dynamic.  That means that  a Clojure program is
not  just something  you compile  and  run, but  something with  which you  can
interact.  Almost all  of the language constructs are reified,  and thus can be
examined and changed.

This  leads to  a substantially  different experience  from running  a program,
examining its results  (or failures) and trying again.  In  particular, you can
grow your program, with data loaded,  adding features, fixing bugs, testing, in
an unbroken stream.

@subheading The REPL
@cindex REPL

While Clojure  can be embedded  in a Java application,  or used as  a scripting
language, the primary programming interface is the Read-Eval-Print-Loop (REPL).
You can  start the  Clojure REPL like  this, and then  follow along  trying the
samples in this feature tour:

@example
java -cp clojure.jar clojure.main
@end example

Clojure has arbitrary precision integers, strings, ratios, doubles, characters,
symbols, keywords.

@cindex compiler
@cindex JVM bytecode
While  Clojure is  a  compiled language,  you don't  ``run''  the compiler  ---
anything  you enter  into the  REPL or  load using  load-file is  automatically
compiled to JVM bytecode on the fly.


@c .....................................

@node Functional Programming
@subsection Functional Programming
@cindex functional

Clojure is  a functional programming language.  It:

@itemize
@item
provides the tools to avoid mutable state,
@item
provides  functions  as first-class  objects,  and
@item
emphasizes recursive iteration instead of side-effect based looping.
@end itemize

The philosophy  behind Clojure is  that most parts  of most programs  should be
functional, and that programs that are more functional are more robust.

@subheading First Class Functions
@cindex @code{fn}
@cindex @code{defn}
@cindex macro
@cindex function object

@code{fn} creates a function object.  It yields  a value like any other --- you
can store it in a var, pass it to functions etc.

@example
(def hello (fn [] "Hello world"))
@end example

@code{defn} is a macro that makes defining functions a little simpler.  Clojure
supports arity  overloading in  a single  function object,  self-reference, and
variable-arity functions using @code{&}:

@example
(defn argcount
  ([] 0)
  ([x] 1)
  ([x y] 2)
  ([x y & more] (+ (argcount x y) (count more))))
@end example

@cindex @code{let}
You can create local names for  values inside a function using @code{let}.  The
scope of any local names is lexical.

@subheading Immutable Data Structures
@cindex data structures, immutable
@cindex immutable data structures

The  easiest   way  to  avoid   mutating  state   is  to  use   immutable  data
structures.  Clojure provides a set of immutable

@itemize
@item lists,
@item vectors,
@item sets and
@item maps.
@end itemize

@cindex persistence
Since they can’t be changed, 'adding' or 'removing' something from an immutable
collection means creating a  new collection just like the old  one but with the
needed  change.  @dfn{Persistence}  is a  term  used to  describe the  property
wherein  the  old version  of  the  collection  is  still available  after  the
'change', and that the collection maintains its performance guarantees for most
operations.   Singly-linked  lists and  trees  are  the basic  functional  data
structures, to which  Clojure adds a hash  map, set and vector  both based upon
array mapped hash tries.

@subsubheading Metadata
@cindex metadata

Applications often need to associate attributes  and other data about data that
is  orthogonal to  the  logical value  of the  data.   Clojure provides  direct
support for  this metadata.   Symbols, and  all of  the collections,  support a
metadata map.   It can be accessed  with the meta function.   Metadata does not
impact equality semantics, nor will metadata be seen in operations on the value
of a collection.  Metadata can be read, and can be printed.

@subheading Extensible Abstractions
@cindex java interfaces

Clojure uses  Java interfaces to define  its core data structures.  This allows
for extensions of Clojure to  new concrete implementations of these interfaces,
and  the library  functions will  work  with these  extensions.  This  is a  big
improvement vs.  hardwiring a language  to the concrete implementations  of its
data types.

@subsubheading Seq Interface
@cindex seq interface

A good  example of this  is the  seq interface.  By  making the core  Lisp list
construct into  an abstraction, a wealth  of library functions are  extended to
any data  structure that can  provide a  sequential interface to  its contents.
All of  the Clojure data  structures can provide seqs.   Seqs can be  used like
iterators or generators.   Seqs are extremely simple,  providing a @code{first}
function,  which return  the  first item  in the  sequence,  and a  @code{rest}
function which returns the  rest of the sequence, which is  itself either a seq
or nil.

@subheading Recursive Looping

In the  absence of mutable local  variables, looping and iteration  must take a
different form than in languages with built-in for or while constructs that are
controlled by  changing state.  In  functional languages looping  and iteration
are replaced/implemented via recursive function calls.


@c .....................................

@node Lisp
@subsection Lisp


@c .....................................

@node Runtime Polymorphism
@subsection Runtime Polymorphism


@c .....................................

@node Concurrent Programming
@subsection Concurrent Programming


@c .....................................

@node Hosted On The JVM
@subsection Hosted On The JVM






@c *****************************************************************************

@node First chapter
@chapter First Chapter Title








@c =============================================================================
@c APPENDICES
@c =============================================================================








@c *****************************************************************************

@node First appendix
@appendix First Appendix Title

Some appendix here.






@c *****************************************************************************

@node The Makefile
@appendix The Makefile
@cindex makefile


@(Makefile@)=
# MAKEFILE FILE CHUNKS
######################

@<Makefile---Variable Definitions@>
@<Makefile---Default Target@>
@<Makefile---TWJR Targets@>
@<Makefile---Clean Targets@>

@




@c -----------------------------------------------------------------------------

@node Makefile Variable Definitions
@appendixsec Makefile Variable Definitions

@<Makefile---Variable Definitions@>=
# VARIABLE DEFINITIONS
######################

FILE  := Clojure-Lang
SHELL := /bin/bash

@




@c -----------------------------------------------------------------------------

@node Makefile Default Target
@appendixsec Default Target
@cindex default target

The @code{default} target processes the  @code{TEXI} source file into an
@code{INFO} file,  a @code{PDF} document,  and an @code{HTML}  web site.
This process  depepnds upon the  @code{TEXI} file having  been generated
from the @code{TWJR} file and its menus and nodes updated first.

The  target  @code{TWJR}  will   run  both  commands  @command{jrtangle}
(producing code  output) and @command{jrweave}  (producing documentation
source code  output) on the  @code{TWJRJ} source code, while  the target
@code{WEAVE} (or  alternatively @code{TEXI})  will run just  the command
@command{jrweave} on the @file{TWJR} file.

In either  case, the  documentation source  code (the  @file{TEXI} file)
will need  to be  updated, which  involves updating  its menus  and node
links.   You  may then  run  the  @code{default} target,  producing  the
@acronym{INFO}, @acronym{PDF}, and @acronym{HTML} files.

@<Makefile---Default Target@>=
# DEFAULT Target
################
.PHONY : TWJR TANGLE WEAVE TEXI INFO PDF HTML
.PHONY : default twjr tangle weave texi info pdf html
default : INFO PDF HTML

@




@c -----------------------------------------------------------------------------


@node Makefile TWJR Targets
@appendixsec TWJR Targets
@cindex TWJR targets

These targets are all related to processing the main source @acronym{TWJR} file
in  some  way.   The  target  @code{twjr} ``tangles  and  weaves''  the  source
document.     @code{info}    runs     @command{makeinfo},    @code{pdf}    runs
@command{pdftexi2dvi}, and @code{html} runs @command{makeinfo --html}.

@<Makefile---TWJR Targets@>=
# TWJR TARGETS
##############
TWJR : twjr
twjr : distclean tangle weave

TANGLE : tangle
tangle : $(FILE).twjr
	jrtangle $(FILE).twjr

WEAVE : weave
weave : TEXI
TEXI  : texi
texi  : $(FILE).texi
$(FILE).texi : $(FILE).twjr
	jrweave $(FILE).twjr > $(FILE).texi

INFO : info
info : $(FILE).info
$(FILE).info : $(FILE).texi
	makeinfo $(FILE).texi
openinfo : INFO
	emacs $(FILE).info

PDF : pdf
pdf : $(FILE).pdf
$(FILE).pdf : $(FILE).texi
	pdftexi2dvi --build=tidy --build-dir=build --quiet $(FILE).texi
openpdf : PDF
	open $(FILE).pdf

HTML : html
html : $(FILE)/index.html
$(FILE)/index.html : $(FILE).texi
	makeinfo --html $(FILE).texi
openhtml : HTML
	open $(FILE)/index.html

@




@c -----------------------------------------------------------------------------

@node Makefile Clean Targets
@appendixsec Makefile Clean Targets
@cindex Makefile clean targets

The @command{clean} target removes backup files.  The @command{dirclean} target
removes  source  directories,  (e.g.,  @file{bin/}  and  and  @file{src/})  and
associated  files and  programs  inside them.   The @command{distclean}  target
removes  the  @file{HTML} directory  and  all  of its  files,  as  well as  the
@file{PDF}  file.    Finally,  the  @command{worldclean}  target   removes  the
@file{INFO} files, leaving the three files:

@itemize
@item
@file{TWJR}
@item
@file{TEXI}
@item
@file{MAKEFILE}
@end itemize

The @file{TEXI} file is always left because  it will be accurate so long as the
@file{TWJR} file is not modified, and  if the @file{TWJR} is modified, then the
@file{TEXI} file will be resourced automatically.

@<Makefile---Clean Targets@>=
.PHONY : clean dirclean distclean worldclean

# remove backup files
clean :
	rm -f *~ .*~ #*#

# remove all directories; leave TexiwebJr, Texinfo files, Makefile
dirclean : clean
	for file in *; do          \
	  case $$file in           \
	    $(FILE)* | Makefile) ;;\
	    my-bib-macros*)      ;;\
	    *) rm -vfr $$file	 ;;\
	  esac                     \
	done

# after dirclean, remove HTML and PDF files
distclean : dirclean
	rm -vfr $(FILE) $(FILE).pdf

# after distclean, remove INFO
worldclean : distclean
	rm -rfv $(FILE).info*

@








@c *****************************************************************************
@node Code Chunk Summaries
@appendix Code Chunk Summaries

This @value{APPENDIX} presents alphabetical lists of
all the file definitions, the code chunk definitions,
and the code chunk references.

@menu
* File Definitions::          Source files by definition.
* Code Chunk Definitions::    Code chunks by definition.
* Code Chunk References::     Code chunks by reference.
@end menu




@c -----------------------------------------------------------------------------
@node File Definitions
@appendixsec Source File Definitions

@print_file_defs




@c -----------------------------------------------------------------------------
@node Code Chunk Definitions
@appendixsec Code Chunk Definitions

@print_code_defs




@c -----------------------------------------------------------------------------
@node Code Chunk References
@appendixsec Code Chunk References

@print_code_refs







@c *****************************************************************************
@node Bibliography
@unnumbered Bibliography








@c *****************************************************************************

@node List of Tables
@unnumbered List of Tables

@listoffloats Table








@c  *****************************************************************************
@node Concept Index
@unnumbered Index

@printindex cp

@bye

TODO:
